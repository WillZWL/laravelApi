<?xml version="1.0" encoding="UTF-8"?>
<project name="vanguard" default="build">
    <property name="pdepend" value="${basedir}/vendor/bin/pdepend" />
    <property name="phpcpd" value="${basedir}/vendor/bin/phpcpd" />
    <property name="phpcs" value="${basedir}/vendor/bin/phpcs" />
    <property name="phpdox" value="${basedir}/vendor/bin/phpdox" />
    <property name="phploc" value="${basedir}/vendor/bin/phploc" />
    <property name="phpmd" value="${basedir}/vendor/bin/phpmd" />
    <property name="phpunit" value="${basedir}/vendor/bin/phpunit" />

    <target name="build"
            depends="prepare,static-analysis-parallel,phpunit,phpdox"
            description="Performs static analysis, runs the tests, and generates project documentation" />

    <!-- Adjust the threadCount attribute's value to the number of CPUs -->
    <target name="static-analysis-parallel"
            description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend" />
                <antcall target="phpmd-ci" />
            </sequential>
            <antcall target="lint" />
            <antcall target="phpcpd-ci" />
            <antcall target="phpcs-ci" />
            <antcall target="phploc-ci" />
        </parallel>
    </target>

    <target name="clean" description="Clean build artifacts">
        <delete dir="${basedir}/build/api" />
        <delete dir="${basedir}/build/coverage" />
        <delete dir="${basedir}/build/logs" />
        <delete dir="${basedir}/build/pdepend" />
        <delete dir="${basedir}/build/phpdox" />
    </target>

    <target name="composer-check">
        <available file="${basedir}/composer.phar" property="composer.present"/>
    </target>

    <target name="get-composer" depends="composer-check" unless="composer.present" description="Get Composer">
        <exec executable="/bin/bash">
            <arg value="-c" />
            <arg value="curl -s https://getcomposer.org/installer | php" />
        </exec>
    </target>

    <target name="prepare" depends="clean,get-composer" description="Prepare for build">
        <mkdir dir="${basedir}/build/api" />
        <mkdir dir="${basedir}/build/coverage" />
        <mkdir dir="${basedir}/build/logs" />
        <mkdir dir="${basedir}/build/pdepend" />
        <mkdir dir="${basedir}/build/phpdox" />
        <exec executable="${basedir}/composer.phar" failonerror="true">
            <arg value="install" />
        </exec>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${basedir}/app">
                <include name="**/*.php" />
            </fileset>
            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}">
            <arg value="--count-tests" />
            <arg path="${basedir}/app" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="phploc-ci" description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/build/logs/phploc.xml" />
            <arg path="${basedir}/app" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg value="--ignore=${basedir}/vendor" />
            <arg path="${basedir}/app" />
        </exec>
    </target>

    <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}">
            <arg path="${basedir}/app" />
            <arg value="text" />
            <arg path="${basedir}/build/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}">
            <arg path="${basedir}/app" />
            <arg value="xml" />
            <arg path="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}">
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/app" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/app" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}">
            <arg path="${basedir}/app" />
        </exec>
    </target>

    <target name="phpcpd-ci" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}">
            <arg value="--log-pmd" />
            <arg path="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/app" />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" failonerror="true">
            <arg value="--configuration" />
            <arg path="${basedir}/phpunit.xml" />
        </exec>
    </target>

    <target name="phpunit-no-coverage"
            description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
            <arg value="--configuration" />
            <arg path="${basedir}/phpunit.xml" />
            <arg value="--no-coverage" />
        </exec>
        <property name="phpunit.done" value="true" />
    </target>

    <target name="phpdox" depends="phploc-ci,phpcs-ci,phpmd-ci" description="Generate project documentation using phpDox">
        <exec executable="${phpdox}" dir="${basedir}/build" taskname="phpdox" />
    </target>
</project>
